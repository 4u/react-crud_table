{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo IP\\\\Desktop\\\\react-crud_table\\\\src\\\\components\\\\search\\\\Search.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    search\n  } = _ref;\n  return function (search) {\n    const [query, setQuery] = useState(\"\");\n    const keys = [\"fullName\", \"address\", \"phoneNumber\", \"email\"];\n    function search(data) {\n      return data.filter(item => keys.some(key => item[key].toLowerCase().includes(query)));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        type: \"text\",\n        className: \"filter\",\n        placeholder: \"Search...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, _this)\n    }, void 0, false);\n  }(search);\n};\n_s(Search, \"HYX2QbDDdTtlu7GfoQbAPZOIM6k=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","Search","search","query","setQuery","keys","data","filter","item","some","key","toLowerCase","includes","e","target","value"],"sources":["C:/Users/Lenovo IP/Desktop/react-crud_table/src/components/search/Search.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Search = ({search}) => {\r\n    const [query, setQuery] = useState(\"\");\r\n\r\n    const keys = [\"fullName\", \"address\", \"phoneNumber\", \"email\"];\r\n\r\n    function search(data) {\r\n        return data.filter((item) => \r\n            keys.some((key) => item[key].toLowerCase().includes(query))\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input \r\n                value={query} \r\n                onChange={(e) => setQuery(e.target.value)} \r\n                type=\"text\" \r\n                className=\"filter\" \r\n                placeholder=\"Search...\" \r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Search;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAExC,MAAMC,MAAM,GAAG;EAAA;EAAA,IAAC;IAACC;EAAM,CAAC;EAAA,yBAAK;IACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;IAEtC,MAAMK,IAAI,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,EAAE,OAAO,CAAC;IAE5D,SAASH,MAAM,CAACI,IAAI,EAAE;MAClB,OAAOA,IAAI,CAACC,MAAM,CAAEC,IAAI,IACpBH,IAAI,CAACI,IAAI,CAAEC,GAAG,IAAKF,IAAI,CAACE,GAAG,CAAC,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACT,KAAK,CAAC,CAAC,CAC9D;IACL;IAEA,oBACI;MAAA,uBACI;QACI,KAAK,EAAEA,KAAM;QACb,QAAQ,EAAGU,CAAC,IAAKT,QAAQ,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAC1C,IAAI,EAAC,MAAM;QACX,SAAS,EAAC,QAAQ;QAClB,WAAW,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA;IACzB,iBACH;EAEX,CAAC;AAAA;AAAA,GAtBKd,MAAM;AAAA,KAANA,MAAM;AAwBZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}